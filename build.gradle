plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.23.3'
}

group = 'YOURSSU'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('updateGitHooks', Copy) {
	from new File(rootProject.rootDir, '.script/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
	if (System.getProperty('os.name').toLowerCase().contains('windows')) {
		Runtime.getRuntime().exec("cmd /c chmod -R +x .git/hooks/")
	} else {
		Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
	}
}

tasks.named('compileJava') {
	dependsOn 'spotlessApply'
	dependsOn 'updateGitHooks'
}

def generated = 'src/main/generated'
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}


clean {
	delete file(generated)
}

spotless {
	java {
		//사용하지 않는 import 제거
		removeUnusedImports()
		// 공백 제거
		trimTrailingWhitespace()
		// 끝부분 NewLine 처리
		endWithNewline()
		// Google Java 포맷 적용 -> 탭은 4개의 공백
		googleJavaFormat().aosp()
		// import 정렬
		importOrder('java', 'javax', 'jakarta', 'org', 'com')
	}
}

jar {
	enabled = false
}